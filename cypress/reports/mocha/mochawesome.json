{
  "stats": {
    "suites": 5,
    "tests": 10,
    "passes": 9,
    "pending": 0,
    "failures": 1,
    "start": "2022-06-22T16:18:20.437Z",
    "end": "2022-06-22T16:18:24.774Z",
    "duration": 4337,
    "testsRegistered": 10,
    "passPercent": 90,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "59c08fcc-514f-4d48-8dbe-b2577fda936b",
      "title": "",
      "fullFile": "cypress/integration/carrinhos.spec.js",
      "file": "cypress/integration/carrinhos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d7350f5a-2c79-477f-87d3-7e25d70eee26",
          "title": "Casos de teste do endpoint /carrinhos da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "36f0c41b-d95d-4069-be57-604451d9df6a",
              "title": "Testes para rota /carrinhos, cadastrar e deletar carrinhos",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "14944bc2-5695-4d40-882b-02d2528e0565",
                  "title": "Carrinho concluir-compra",
                  "fullFile": "",
                  "file": "",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve criar um produto",
                      "fullTitle": "Casos de teste do endpoint /carrinhos da API Serverest Testes para rota /carrinhos, cadastrar e deletar carrinhos Carrinho concluir-compra Deve criar um produto",
                      "timedOut": null,
                      "duration": 1034,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_produtos.default.adicionarProdutoComSucesso().then(res => {\n  cy.writeFile('./cypress/fixtures/produtoId.json', res);\n  cy.validacaoContrato(res, 'post-produtos', 201).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarAdicaoDeProdutoComSucesso(res);\n});",
                      "err": {},
                      "uuid": "14f4e15b-9c1d-4fe3-a975-81d0f7c85e41",
                      "parentUUID": "14944bc2-5695-4d40-882b-02d2528e0565",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Não deve criar um carrinho, pois não é permitido possuir produto duplicado",
                      "fullTitle": "Casos de teste do endpoint /carrinhos da API Serverest Testes para rota /carrinhos, cadastrar e deletar carrinhos Carrinho concluir-compra Não deve criar um carrinho, pois não é permitido possuir produto duplicado",
                      "timedOut": null,
                      "duration": 230,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_carrinhos.default.adicionarNaoPermitirProdutoDuplicadoNoCarrinho().then(res => {\n  cy.validacaoContrato(res, 'post-carrinhos', 400).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarNaoPermitirAdicaoDeProdutoDuplicado(res);\n});",
                      "err": {},
                      "uuid": "1aa65cd0-7e57-4dd0-888f-af5bda9e0f15",
                      "parentUUID": "14944bc2-5695-4d40-882b-02d2528e0565",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve criar um carrinho e adicionar os produtos especificados ligados à ele",
                      "fullTitle": "Casos de teste do endpoint /carrinhos da API Serverest Testes para rota /carrinhos, cadastrar e deletar carrinhos Carrinho concluir-compra Deve criar um carrinho e adicionar os produtos especificados ligados à ele",
                      "timedOut": null,
                      "duration": 223,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_carrinhos.default.adicionarCarrinhoComSucesso().then(res => {\n  cy.validacaoContrato(res, 'post-carrinhos', 201).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarAdicaoDeCarrinhos(res);\n});",
                      "err": {},
                      "uuid": "e67769b2-6262-4804-bf3f-13c4faf212d5",
                      "parentUUID": "14944bc2-5695-4d40-882b-02d2528e0565",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve deletar um carrinho-concluir",
                      "fullTitle": "Casos de teste do endpoint /carrinhos da API Serverest Testes para rota /carrinhos, cadastrar e deletar carrinhos Carrinho concluir-compra Deve deletar um carrinho-concluir",
                      "timedOut": null,
                      "duration": 222,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_carrinhos.default.deletarCarrinhoConcluirComSucesso().then(res => {\n  cy.validacaoContrato(res, 'delete-carrinhos-concluir', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarRemocaoDeCarrinhoConcluirComSucesso(res);\n});",
                      "err": {},
                      "uuid": "ff8b8f47-ad93-43b2-abcd-a336c7672ab6",
                      "parentUUID": "14944bc2-5695-4d40-882b-02d2528e0565",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "14f4e15b-9c1d-4fe3-a975-81d0f7c85e41",
                    "1aa65cd0-7e57-4dd0-888f-af5bda9e0f15",
                    "e67769b2-6262-4804-bf3f-13c4faf212d5",
                    "ff8b8f47-ad93-43b2-abcd-a336c7672ab6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1709,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "97fe9cb9-8738-462c-8fa8-9e4f63eb03c0",
                  "title": "Carrinho cancelar-compra",
                  "fullFile": "",
                  "file": "",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve criar um carrinho e adicionar os produtos especificados ligados à ele",
                      "fullTitle": "Casos de teste do endpoint /carrinhos da API Serverest Testes para rota /carrinhos, cadastrar e deletar carrinhos Carrinho cancelar-compra Deve criar um carrinho e adicionar os produtos especificados ligados à ele",
                      "timedOut": null,
                      "duration": 223,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_carrinhos.default.adicionarCarrinhoComSucesso().then(res => {\n  cy.validacaoContrato(res, 'post-carrinhos', 201).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarAdicaoDeCarrinhos(res);\n});",
                      "err": {},
                      "uuid": "94611f09-9364-4755-ae89-893a3245bdc5",
                      "parentUUID": "97fe9cb9-8738-462c-8fa8-9e4f63eb03c0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve deletar um carrinho-cancelar, deletar usuario e produto",
                      "fullTitle": "Casos de teste do endpoint /carrinhos da API Serverest Testes para rota /carrinhos, cadastrar e deletar carrinhos Carrinho cancelar-compra Deve deletar um carrinho-cancelar, deletar usuario e produto",
                      "timedOut": null,
                      "duration": 572,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "_carrinhos.default.deletarCarrinhoCancelarComSucesso().then(res => {\n  cy.validacaoContrato(res, 'delete-carrinhos-cancelar', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarRemocaoDeCarrinhoCancelarComSucesso(res);\n  _produtos.default.deletarProduto().then(res => {\n    _validaServerest.default.validarRemocaoDeProdutoComSucesso(res);\n  });\n  _usuarios.default.deletarUsuarioComSucesso().then(res => {\n    _validaServerest.default.validaRemocaoDeUsuarioComSucesso(res);\n  });\n});",
                      "err": {
                        "message": "AssertionError: expected 'Registro excluído com sucesso. Estoque dos produtos reabastecido' to equal 'Registro excluído com sucesso'",
                        "estack": "AssertionError: expected 'Registro excluído com sucesso. Estoque dos produtos reabastecido' to equal 'Registro excluído com sucesso'\n    at Function.validarRemocaoDeCarrinhoCancelarComSucesso (https://serverest.dev/__cypress/tests?p=cypress\\integration\\carrinhos.spec.js:1114:36)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\carrinhos.spec.js:259:36)",
                        "diff": "- 'Registro excluído com sucesso. Estoque dos produtos reabastecido'\n+ 'Registro excluído com sucesso'\n"
                      },
                      "uuid": "3ce4fa77-b2f2-4d52-b876-ca43ef58c385",
                      "parentUUID": "97fe9cb9-8738-462c-8fa8-9e4f63eb03c0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve deletar usuario e produto",
                      "fullTitle": "Casos de teste do endpoint /carrinhos da API Serverest Testes para rota /carrinhos, cadastrar e deletar carrinhos Carrinho cancelar-compra Deve deletar usuario e produto",
                      "timedOut": null,
                      "duration": 427,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_produtos.default.deletarProduto().then(res => {\n  _validaServerest.default.validarRemocaoDeProdutoComSucesso(res);\n});\n_usuarios.default.deletarUsuarioComSucesso().then(res => {\n  _validaServerest.default.validaRemocaoDeUsuarioComSucesso(res);\n});",
                      "err": {},
                      "uuid": "cb420b32-2d6c-47e8-ac43-c2fbfca7adbe",
                      "parentUUID": "97fe9cb9-8738-462c-8fa8-9e4f63eb03c0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "94611f09-9364-4755-ae89-893a3245bdc5",
                    "cb420b32-2d6c-47e8-ac43-c2fbfca7adbe"
                  ],
                  "failures": [
                    "3ce4fa77-b2f2-4d52-b876-ca43ef58c385"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 1222,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "a5486e99-cc2f-4f27-bc40-d11a88e03a3b",
                  "title": "Usuário sem Token",
                  "fullFile": "",
                  "file": "",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Não deve criar um carrinho, pois o token é inválido, inexistente ou expirado",
                      "fullTitle": "Casos de teste do endpoint /carrinhos da API Serverest Testes para rota /carrinhos, cadastrar e deletar carrinhos Usuário sem Token Não deve criar um carrinho, pois o token é inválido, inexistente ou expirado",
                      "timedOut": null,
                      "duration": 440,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_login.default.loginSemSucesso().then(usuario => {\n  _carrinhos.default.adicionarCarrinhoSemToken().then(res => {\n    cy.validacaoContrato(res, 'post-carrinhos', 400).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarAdicaoDeCarrinhoSemToken(res);\n  });\n});",
                      "err": {},
                      "uuid": "fab7addc-74d5-44b4-b625-a7bd98abb7ec",
                      "parentUUID": "a5486e99-cc2f-4f27-bc40-d11a88e03a3b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Não deve deletar um carrinho-concluir, pois o token é inválido, inexistente ou expirado",
                      "fullTitle": "Casos de teste do endpoint /carrinhos da API Serverest Testes para rota /carrinhos, cadastrar e deletar carrinhos Usuário sem Token Não deve deletar um carrinho-concluir, pois o token é inválido, inexistente ou expirado",
                      "timedOut": null,
                      "duration": 435,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_login.default.loginSemSucesso().then(usuario => {\n  _carrinhos.default.deletarCarrinhoConcluirSemToken().then(res => {\n    cy.validacaoContrato(res, 'delete-carrinhos-concluir', 401).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarRemocaoDeCarrinhoConcluirSemToken(res);\n  });\n});",
                      "err": {},
                      "uuid": "071c8597-5aae-498c-a325-a05def7990b6",
                      "parentUUID": "a5486e99-cc2f-4f27-bc40-d11a88e03a3b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Não deve deletar um carrinho-cancelar, pois o token é inválido, inexistente ou expirado",
                      "fullTitle": "Casos de teste do endpoint /carrinhos da API Serverest Testes para rota /carrinhos, cadastrar e deletar carrinhos Usuário sem Token Não deve deletar um carrinho-cancelar, pois o token é inválido, inexistente ou expirado",
                      "timedOut": null,
                      "duration": 437,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_login.default.loginSemSucesso().then(usuario => {\n  _carrinhos.default.deletarCarrinhoCancelarSemToken().then(res => {\n    cy.validacaoContrato(res, 'delete-carrinhos-cancelar', 401).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarRemocaoDeCarrinhoCancelarSemToken(res);\n  });\n});",
                      "err": {},
                      "uuid": "c0139288-63e5-4937-bec1-6ba7d15c33e0",
                      "parentUUID": "a5486e99-cc2f-4f27-bc40-d11a88e03a3b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fab7addc-74d5-44b4-b625-a7bd98abb7ec",
                    "071c8597-5aae-498c-a325-a05def7990b6",
                    "c0139288-63e5-4937-bec1-6ba7d15c33e0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1312,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}