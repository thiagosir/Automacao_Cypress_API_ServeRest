{
  "stats": {
    "suites": 4,
    "tests": 11,
    "passes": 10,
    "pending": 0,
    "failures": 1,
    "start": "2022-06-22T16:18:44.744Z",
    "end": "2022-06-22T16:18:49.525Z",
    "duration": 4781,
    "testsRegistered": 11,
    "passPercent": 90.9090909090909,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "21882196-ab3e-4914-b943-392d426f34fd",
      "title": "",
      "fullFile": "cypress/integration/produtos.spec.js",
      "file": "cypress/integration/produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3b2f331d-4033-4dda-a423-0a3910db5e08",
          "title": "Casos de teste do endpoint /produtos da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6b2a9c9d-d933-49ad-b702-cf92c5c64aa3",
              "title": "CRUD para a rota /produtos",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve listar todos os produtos",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest CRUD para a rota /produtos Deve listar todos os produtos",
                  "timedOut": null,
                  "duration": 935,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.buscarProdutos().then(res => {\n  cy.validacaoContrato(res, 'get-produtos', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarBuscarProdutos(res);\n});",
                  "err": {
                    "message": "Error: Erros encontrados na validação de contrato em: \n  must have required property 'usuarios', but received object",
                    "estack": "Error: Erros encontrados na validação de contrato em: \n  must have required property 'usuarios', but received object\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\support\\index.js:140:13)",
                    "diff": null
                  },
                  "uuid": "e39c5277-3fc2-404c-80f9-5861f43722ef",
                  "parentUUID": "6b2a9c9d-d933-49ad-b702-cf92c5c64aa3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve adicionar um novo produto com sucesso",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest CRUD para a rota /produtos Deve adicionar um novo produto com sucesso",
                  "timedOut": null,
                  "duration": 264,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.adicionarProdutoComSucesso().then(res => {\n  cy.writeFile('./cypress/fixtures/produtoId.json', res);\n  cy.validacaoContrato(res, 'post-produtos', 201).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarAdicaoDeProdutoComSucesso(res);\n});",
                  "err": {},
                  "uuid": "b8e0fd73-a36b-430a-bf9e-6fab4bd62c38",
                  "parentUUID": "6b2a9c9d-d933-49ad-b702-cf92c5c64aa3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar um produto por seu ID",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest CRUD para a rota /produtos Deve buscar um produto por seu ID",
                  "timedOut": null,
                  "duration": 234,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.buscarProdutosById().then(res => {\n  cy.validacaoContrato(res, 'get-produtos-by-id', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarBuscarProdutosById(res);\n});",
                  "err": {},
                  "uuid": "0f3bd8cb-5294-44d8-93e2-7dce71ad7361",
                  "parentUUID": "6b2a9c9d-d933-49ad-b702-cf92c5c64aa3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar um produto com sucesso",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest CRUD para a rota /produtos Deve editar um produto com sucesso",
                  "timedOut": null,
                  "duration": 227,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.editarProdutoComSucesso().then(res => {\n  cy.validacaoContrato(res, 'put-produtos', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarEdicaoDeProdutoComSucesso(res);\n});",
                  "err": {},
                  "uuid": "a52c979d-8732-4b4a-9c53-ef55a862f00e",
                  "parentUUID": "6b2a9c9d-d933-49ad-b702-cf92c5c64aa3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve deletar um produto com sucesso",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest CRUD para a rota /produtos Deve deletar um produto com sucesso",
                  "timedOut": null,
                  "duration": 440,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.deletarProduto().then(res => {\n  cy.validacaoContrato(res, 'delete-produtos', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarRemocaoDeProdutoComSucesso(res);\n  _usuarios.default.deletarUsuarioComSucesso();\n});",
                  "err": {},
                  "uuid": "45be7285-bb0f-422c-9e75-1a21c327d759",
                  "parentUUID": "6b2a9c9d-d933-49ad-b702-cf92c5c64aa3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8e0fd73-a36b-430a-bf9e-6fab4bd62c38",
                "0f3bd8cb-5294-44d8-93e2-7dce71ad7361",
                "a52c979d-8732-4b4a-9c53-ef55a862f00e",
                "45be7285-bb0f-422c-9e75-1a21c327d759"
              ],
              "failures": [
                "e39c5277-3fc2-404c-80f9-5861f43722ef"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2100,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "abea50a9-e2b1-40fc-8b0c-0364087d13ff",
              "title": "Usuário sem Token",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Não deve deletar um produto, pois o token é inválido, inexistente ou expirado",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest Usuário sem Token Não deve deletar um produto, pois o token é inválido, inexistente ou expirado",
                  "timedOut": null,
                  "duration": 419,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_login.default.loginSemSucesso().then(usuario => {\n  _produtos.default.deletarProdutoSemToken().then(res => {\n    cy.validacaoContrato(res, 'delete-produtos', 401).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarRemocaoDeProdutoSemToken(res);\n  });\n});",
                  "err": {},
                  "uuid": "39f65ac7-6b36-4021-9af0-2a6933bb995b",
                  "parentUUID": "abea50a9-e2b1-40fc-8b0c-0364087d13ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve editar um produto, pois o token é inválido, inexistente ou expirado",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest Usuário sem Token Não deve editar um produto, pois o token é inválido, inexistente ou expirado",
                  "timedOut": null,
                  "duration": 420,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_login.default.loginSemSucesso().then(usuario => {\n  _produtos.default.editarProdutoSemToken().then(res => {\n    cy.validacaoContrato(res, 'put-produtos', 401).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarEdicaoDeProdutoSemToken(res);\n  });\n});",
                  "err": {},
                  "uuid": "2f06538c-a9b1-4a19-9ae2-a2c090d824f0",
                  "parentUUID": "abea50a9-e2b1-40fc-8b0c-0364087d13ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve adicionar um produto, pois o token é inválido, inexistente ou expirado",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest Usuário sem Token Não deve adicionar um produto, pois o token é inválido, inexistente ou expirado",
                  "timedOut": null,
                  "duration": 406,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_login.default.loginSemSucesso().then(usuario => {\n  _produtos.default.adicionarProdutoSemToken(usuario).then(res => {\n    cy.validacaoContrato(res, 'post-produtos', 401).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarAdicaoDeProdutoSemToken(res);\n  });\n});",
                  "err": {},
                  "uuid": "cc85e8a2-6792-4fe9-91f6-97b13449d99c",
                  "parentUUID": "abea50a9-e2b1-40fc-8b0c-0364087d13ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39f65ac7-6b36-4021-9af0-2a6933bb995b",
                "2f06538c-a9b1-4a19-9ae2-a2c090d824f0",
                "cc85e8a2-6792-4fe9-91f6-97b13449d99c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1245,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f41a4b48-407e-4e70-ae2a-413f442397cd",
              "title": "Usuário sem Adm",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Não deve adicionar um produto pois a rota é exclusiva para administradores",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest Usuário sem Adm Não deve adicionar um produto pois a rota é exclusiva para administradores",
                  "timedOut": null,
                  "duration": 846,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.adicionarProdutoSemAdmin().then(res => {\n  cy.validacaoContrato(res, 'post-produtos', 403).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarAdicaoDeProdutoSemAdmin(res);\n});",
                  "err": {},
                  "uuid": "9c94b19f-8548-4bec-b8e8-a3fbe66e729f",
                  "parentUUID": "f41a4b48-407e-4e70-ae2a-413f442397cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve deletar um produto pois a rota é exclusiva para administradores",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest Usuário sem Adm Não deve deletar um produto pois a rota é exclusiva para administradores",
                  "timedOut": null,
                  "duration": 231,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.deletarProdutoSemAdmin().then(res => {\n  cy.validacaoContrato(res, 'delete-produtos', 403).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarRemocaoDeProdutoSemAdmin(res);\n});",
                  "err": {},
                  "uuid": "4b28f29a-222d-49fd-b393-e603a2a9a6da",
                  "parentUUID": "f41a4b48-407e-4e70-ae2a-413f442397cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve editar um produto pois a rota é exclusiva para administradores",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest Usuário sem Adm Não deve editar um produto pois a rota é exclusiva para administradores",
                  "timedOut": null,
                  "duration": 250,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.editarProdutoSemAdmin().then(res => {\n  cy.validacaoContrato(res, 'put-produtos', 403).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarEdicaoDeProdutoSemAdmin(res);\n});",
                  "err": {},
                  "uuid": "ee600452-19ef-47b7-a1f0-124b575700b5",
                  "parentUUID": "f41a4b48-407e-4e70-ae2a-413f442397cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c94b19f-8548-4bec-b8e8-a3fbe66e729f",
                "4b28f29a-222d-49fd-b393-e603a2a9a6da",
                "ee600452-19ef-47b7-a1f0-124b575700b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1327,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}