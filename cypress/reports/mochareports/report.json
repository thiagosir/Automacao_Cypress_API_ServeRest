{
  "stats": {
    "suites": 5,
    "tests": 31,
    "passes": 27,
    "pending": 0,
    "failures": 4,
    "start": "2022-06-22T16:18:20.437Z",
    "end": "2022-06-22T16:18:56.666Z",
    "duration": 13117,
    "testsRegistered": 31,
    "passPercent": 87.09677419354838,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "efbbccf0-2d89-41d5-bd75-4e921c9d763b",
      "title": "",
      "fullFile": "cypress/integration/fluxoCompraSucesso.spec.js",
      "file": "cypress/integration/fluxoCompraSucesso.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5b3604c2-4f9b-4add-9d8c-21f8328f8872",
          "title": "Fluxo prioritário (Concluir-compra) da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f432baef-2278-4dfc-9d29-cf74ae369c62",
              "title": "Logando com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve criar um produto",
                  "fullTitle": "Fluxo prioritário (Concluir-compra) da API Serverest Logando com sucesso Deve criar um produto",
                  "timedOut": null,
                  "duration": 721,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.adicionarProdutoComSucesso().then(res => {\n  cy.writeFile('./cypress/fixtures/produtoId.json', res);\n  cy.validacaoContrato(res, 'post-produtos', 201).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarAdicaoDeProdutoComSucesso(res);\n});",
                  "err": {},
                  "uuid": "6ccd594d-198c-481c-ae60-7153b474d75e",
                  "parentUUID": "f432baef-2278-4dfc-9d29-cf74ae369c62",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve criar um carrinho e adicionar produtos ligados à ele",
                  "fullTitle": "Fluxo prioritário (Concluir-compra) da API Serverest Logando com sucesso Deve criar um carrinho e adicionar produtos ligados à ele",
                  "timedOut": null,
                  "duration": 237,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_carrinhos.default.adicionarCarrinhoComSucesso().then(res => {\n  cy.validacaoContrato(res, 'post-carrinhos', 201).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarAdicaoDeCarrinhos(res);\n});",
                  "err": {},
                  "uuid": "414dabfc-c6fc-4397-810c-f87f27039766",
                  "parentUUID": "f432baef-2278-4dfc-9d29-cf74ae369c62",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve deletar um carrinho-concluir e deletar o usuário",
                  "fullTitle": "Fluxo prioritário (Concluir-compra) da API Serverest Logando com sucesso Deve deletar um carrinho-concluir e deletar o usuário",
                  "timedOut": null,
                  "duration": 616,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_carrinhos.default.deletarCarrinhoConcluirComSucesso().then(res => {\n  cy.validacaoContrato(res, 'delete-carrinhos-concluir', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarRemocaoDeCarrinhoConcluirComSucesso(res);\n  _produtos.default.deletarProduto().then(res => {\n    _validaServerest.default.validarRemocaoDeProdutoComSucesso(res);\n  });\n  _usuarios.default.deletarUsuarioComSucesso().then(res => {\n    _validaServerest.default.validaRemocaoDeUsuarioComSucesso(res);\n  });\n});",
                  "err": {},
                  "uuid": "c0b38fcf-5bcb-407a-b756-00ef3b9eb5f3",
                  "parentUUID": "f432baef-2278-4dfc-9d29-cf74ae369c62",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6ccd594d-198c-481c-ae60-7153b474d75e",
                "414dabfc-c6fc-4397-810c-f87f27039766",
                "c0b38fcf-5bcb-407a-b756-00ef3b9eb5f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1574,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "27bcb2a5-f9a5-498e-be86-0a0387f3cc57",
      "title": "",
      "fullFile": "cypress/integration/login.spec.js",
      "file": "cypress/integration/login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "82305cf8-532f-4d1f-a4ce-07b88f8e95e1",
          "title": "Casos de teste do endpoint /login da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve realizar login ",
              "fullTitle": "Casos de teste do endpoint /login da API Serverest Deve realizar login ",
              "timedOut": null,
              "duration": 725,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_usuarios.default.adicionarUsuarioComSucesso().then(res => {\n  _validaServerest.default.validaAdicaoDeUsuarioComSucesso(res);\n  _login.default.login().then(res => {\n    cy.validacaoContrato(res, 'post-login', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarLoginComSucesso(res);\n    _login.default.salvarToken(res);\n    _usuarios.default.deletarUsuarioComSucesso();\n  });\n});",
              "err": {},
              "uuid": "ca72b808-add1-471c-accf-64fce2098887",
              "parentUUID": "82305cf8-532f-4d1f-a4ce-07b88f8e95e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve realizar login pois não será especificado dados",
              "fullTitle": "Casos de teste do endpoint /login da API Serverest Não deve realizar login pois não será especificado dados",
              "timedOut": null,
              "duration": 452,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_login.default.loginDadosNulos().then(res => {\n  cy.validacaoContrato(res, 'post-login', 400).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarloginDadosNulos(res);\n});",
              "err": {
                "message": "Error: Erros encontrados na validação de contrato em: \n  must have required property 'message', but received object",
                "estack": "Error: Erros encontrados na validação de contrato em: \n  must have required property 'message', but received object\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\support\\index.js:140:13)",
                "diff": null
              },
              "uuid": "e0506d7c-76cf-4efd-a8ee-be2f2f69d78f",
              "parentUUID": "82305cf8-532f-4d1f-a4ce-07b88f8e95e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve realizar login pois os campos estão vazios",
              "fullTitle": "Casos de teste do endpoint /login da API Serverest Não deve realizar login pois os campos estão vazios",
              "timedOut": null,
              "duration": 453,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_login.default.loginCamposVazios().then(res => {\n  cy.validacaoContrato(res, 'post-login', 400).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarloginDadosNulos(res);\n});",
              "err": {
                "message": "Error: Erros encontrados na validação de contrato em: \n  must have required property 'message', but received object",
                "estack": "Error: Erros encontrados na validação de contrato em: \n  must have required property 'message', but received object\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\support\\index.js:140:13)",
                "diff": null
              },
              "uuid": "136ec1ff-4131-4fcf-bd9f-7673fa32beca",
              "parentUUID": "82305cf8-532f-4d1f-a4ce-07b88f8e95e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve realizar login pois os dados serão inválidos",
              "fullTitle": "Casos de teste do endpoint /login da API Serverest Não deve realizar login pois os dados serão inválidos",
              "timedOut": null,
              "duration": 238,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_login.default.loginSemSucesso().then(res => {\n  cy.validacaoContrato(res, 'post-login', 400).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarLoginSemSucesso(res);\n});",
              "err": {},
              "uuid": "cd59d373-4622-4684-a232-bb0ae5088f12",
              "parentUUID": "82305cf8-532f-4d1f-a4ce-07b88f8e95e1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ca72b808-add1-471c-accf-64fce2098887",
            "cd59d373-4622-4684-a232-bb0ae5088f12"
          ],
          "failures": [
            "e0506d7c-76cf-4efd-a8ee-be2f2f69d78f",
            "136ec1ff-4131-4fcf-bd9f-7673fa32beca"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1868,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "21882196-ab3e-4914-b943-392d426f34fd",
      "title": "",
      "fullFile": "cypress/integration/produtos.spec.js",
      "file": "cypress/integration/produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3b2f331d-4033-4dda-a423-0a3910db5e08",
          "title": "Casos de teste do endpoint /produtos da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6b2a9c9d-d933-49ad-b702-cf92c5c64aa3",
              "title": "CRUD para a rota /produtos",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve listar todos os produtos",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest CRUD para a rota /produtos Deve listar todos os produtos",
                  "timedOut": null,
                  "duration": 935,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.buscarProdutos().then(res => {\n  cy.validacaoContrato(res, 'get-produtos', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarBuscarProdutos(res);\n});",
                  "err": {
                    "message": "Error: Erros encontrados na validação de contrato em: \n  must have required property 'usuarios', but received object",
                    "estack": "Error: Erros encontrados na validação de contrato em: \n  must have required property 'usuarios', but received object\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\support\\index.js:140:13)",
                    "diff": null
                  },
                  "uuid": "e39c5277-3fc2-404c-80f9-5861f43722ef",
                  "parentUUID": "6b2a9c9d-d933-49ad-b702-cf92c5c64aa3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve adicionar um novo produto com sucesso",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest CRUD para a rota /produtos Deve adicionar um novo produto com sucesso",
                  "timedOut": null,
                  "duration": 264,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.adicionarProdutoComSucesso().then(res => {\n  cy.writeFile('./cypress/fixtures/produtoId.json', res);\n  cy.validacaoContrato(res, 'post-produtos', 201).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarAdicaoDeProdutoComSucesso(res);\n});",
                  "err": {},
                  "uuid": "b8e0fd73-a36b-430a-bf9e-6fab4bd62c38",
                  "parentUUID": "6b2a9c9d-d933-49ad-b702-cf92c5c64aa3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar um produto por seu ID",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest CRUD para a rota /produtos Deve buscar um produto por seu ID",
                  "timedOut": null,
                  "duration": 234,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.buscarProdutosById().then(res => {\n  cy.validacaoContrato(res, 'get-produtos-by-id', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarBuscarProdutosById(res);\n});",
                  "err": {},
                  "uuid": "0f3bd8cb-5294-44d8-93e2-7dce71ad7361",
                  "parentUUID": "6b2a9c9d-d933-49ad-b702-cf92c5c64aa3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar um produto com sucesso",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest CRUD para a rota /produtos Deve editar um produto com sucesso",
                  "timedOut": null,
                  "duration": 227,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.editarProdutoComSucesso().then(res => {\n  cy.validacaoContrato(res, 'put-produtos', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarEdicaoDeProdutoComSucesso(res);\n});",
                  "err": {},
                  "uuid": "a52c979d-8732-4b4a-9c53-ef55a862f00e",
                  "parentUUID": "6b2a9c9d-d933-49ad-b702-cf92c5c64aa3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve deletar um produto com sucesso",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest CRUD para a rota /produtos Deve deletar um produto com sucesso",
                  "timedOut": null,
                  "duration": 440,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.deletarProduto().then(res => {\n  cy.validacaoContrato(res, 'delete-produtos', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarRemocaoDeProdutoComSucesso(res);\n  _usuarios.default.deletarUsuarioComSucesso();\n});",
                  "err": {},
                  "uuid": "45be7285-bb0f-422c-9e75-1a21c327d759",
                  "parentUUID": "6b2a9c9d-d933-49ad-b702-cf92c5c64aa3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8e0fd73-a36b-430a-bf9e-6fab4bd62c38",
                "0f3bd8cb-5294-44d8-93e2-7dce71ad7361",
                "a52c979d-8732-4b4a-9c53-ef55a862f00e",
                "45be7285-bb0f-422c-9e75-1a21c327d759"
              ],
              "failures": [
                "e39c5277-3fc2-404c-80f9-5861f43722ef"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2100,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "abea50a9-e2b1-40fc-8b0c-0364087d13ff",
              "title": "Usuário sem Token",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Não deve deletar um produto, pois o token é inválido, inexistente ou expirado",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest Usuário sem Token Não deve deletar um produto, pois o token é inválido, inexistente ou expirado",
                  "timedOut": null,
                  "duration": 419,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_login.default.loginSemSucesso().then(usuario => {\n  _produtos.default.deletarProdutoSemToken().then(res => {\n    cy.validacaoContrato(res, 'delete-produtos', 401).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarRemocaoDeProdutoSemToken(res);\n  });\n});",
                  "err": {},
                  "uuid": "39f65ac7-6b36-4021-9af0-2a6933bb995b",
                  "parentUUID": "abea50a9-e2b1-40fc-8b0c-0364087d13ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve editar um produto, pois o token é inválido, inexistente ou expirado",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest Usuário sem Token Não deve editar um produto, pois o token é inválido, inexistente ou expirado",
                  "timedOut": null,
                  "duration": 420,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_login.default.loginSemSucesso().then(usuario => {\n  _produtos.default.editarProdutoSemToken().then(res => {\n    cy.validacaoContrato(res, 'put-produtos', 401).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarEdicaoDeProdutoSemToken(res);\n  });\n});",
                  "err": {},
                  "uuid": "2f06538c-a9b1-4a19-9ae2-a2c090d824f0",
                  "parentUUID": "abea50a9-e2b1-40fc-8b0c-0364087d13ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve adicionar um produto, pois o token é inválido, inexistente ou expirado",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest Usuário sem Token Não deve adicionar um produto, pois o token é inválido, inexistente ou expirado",
                  "timedOut": null,
                  "duration": 406,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_login.default.loginSemSucesso().then(usuario => {\n  _produtos.default.adicionarProdutoSemToken(usuario).then(res => {\n    cy.validacaoContrato(res, 'post-produtos', 401).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarAdicaoDeProdutoSemToken(res);\n  });\n});",
                  "err": {},
                  "uuid": "cc85e8a2-6792-4fe9-91f6-97b13449d99c",
                  "parentUUID": "abea50a9-e2b1-40fc-8b0c-0364087d13ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39f65ac7-6b36-4021-9af0-2a6933bb995b",
                "2f06538c-a9b1-4a19-9ae2-a2c090d824f0",
                "cc85e8a2-6792-4fe9-91f6-97b13449d99c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1245,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f41a4b48-407e-4e70-ae2a-413f442397cd",
              "title": "Usuário sem Adm",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Não deve adicionar um produto pois a rota é exclusiva para administradores",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest Usuário sem Adm Não deve adicionar um produto pois a rota é exclusiva para administradores",
                  "timedOut": null,
                  "duration": 846,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.adicionarProdutoSemAdmin().then(res => {\n  cy.validacaoContrato(res, 'post-produtos', 403).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarAdicaoDeProdutoSemAdmin(res);\n});",
                  "err": {},
                  "uuid": "9c94b19f-8548-4bec-b8e8-a3fbe66e729f",
                  "parentUUID": "f41a4b48-407e-4e70-ae2a-413f442397cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve deletar um produto pois a rota é exclusiva para administradores",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest Usuário sem Adm Não deve deletar um produto pois a rota é exclusiva para administradores",
                  "timedOut": null,
                  "duration": 231,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.deletarProdutoSemAdmin().then(res => {\n  cy.validacaoContrato(res, 'delete-produtos', 403).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarRemocaoDeProdutoSemAdmin(res);\n});",
                  "err": {},
                  "uuid": "4b28f29a-222d-49fd-b393-e603a2a9a6da",
                  "parentUUID": "f41a4b48-407e-4e70-ae2a-413f442397cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve editar um produto pois a rota é exclusiva para administradores",
                  "fullTitle": "Casos de teste do endpoint /produtos da API Serverest Usuário sem Adm Não deve editar um produto pois a rota é exclusiva para administradores",
                  "timedOut": null,
                  "duration": 250,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_produtos.default.editarProdutoSemAdmin().then(res => {\n  cy.validacaoContrato(res, 'put-produtos', 403).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarEdicaoDeProdutoSemAdmin(res);\n});",
                  "err": {},
                  "uuid": "ee600452-19ef-47b7-a1f0-124b575700b5",
                  "parentUUID": "f41a4b48-407e-4e70-ae2a-413f442397cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c94b19f-8548-4bec-b8e8-a3fbe66e729f",
                "4b28f29a-222d-49fd-b393-e603a2a9a6da",
                "ee600452-19ef-47b7-a1f0-124b575700b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1327,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d62ad0e8-47f3-49b0-9e19-521670716234",
      "title": "",
      "fullFile": "cypress/integration/usuarios.spec.js",
      "file": "cypress/integration/usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "77518aeb-cab0-4723-9be0-11ea5eaa7143",
          "title": "Casos de teste do endpoint /usuarios da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "128b2a5f-9179-47c4-866b-750b63709979",
              "title": "Cadastrar e deletar usuário",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve cadastrar um usuário",
                  "fullTitle": "Casos de teste do endpoint /usuarios da API Serverest Cadastrar e deletar usuário Deve cadastrar um usuário",
                  "timedOut": null,
                  "duration": 305,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_usuarios.default.adicionarUsuarioComSucesso().then(res => {\n  cy.writeFile('./cypress/fixtures/userId.json', res.body);\n  cy.validacaoContrato(res, 'post-usuarios', 201).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validaAdicaoDeUsuarioComSucesso(res);\n});",
                  "err": {},
                  "uuid": "22f03f7a-5316-45c7-a772-a2e235c4ed9d",
                  "parentUUID": "128b2a5f-9179-47c4-866b-750b63709979",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve cadastrar um novo usuário, retornando que o usuário já existe",
                  "fullTitle": "Casos de teste do endpoint /usuarios da API Serverest Cadastrar e deletar usuário Não deve cadastrar um novo usuário, retornando que o usuário já existe",
                  "timedOut": null,
                  "duration": 230,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_usuarios.default.adicionarUsuarioSemSucesso().then(res => {\n  cy.validacaoContrato(res, 'post-usuarios', 400).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validaAdicaoDeUsuarioSemSucesso(res);\n});",
                  "err": {},
                  "uuid": "cbe58ff8-b372-4664-8373-8f584dc7657d",
                  "parentUUID": "128b2a5f-9179-47c4-866b-750b63709979",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve deletar um usuário",
                  "fullTitle": "Casos de teste do endpoint /usuarios da API Serverest Cadastrar e deletar usuário Deve deletar um usuário",
                  "timedOut": null,
                  "duration": 225,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_usuarios.default.deletarUsuarioComSucesso().then(res => {\n  cy.validacaoContrato(res, 'delete-usuarios', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validaRemocaoDeUsuarioComSucesso(res);\n});",
                  "err": {},
                  "uuid": "c2e57497-f6e7-476e-baa5-cd8ae2c23f5f",
                  "parentUUID": "128b2a5f-9179-47c4-866b-750b63709979",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "22f03f7a-5316-45c7-a772-a2e235c4ed9d",
                "cbe58ff8-b372-4664-8373-8f584dc7657d",
                "c2e57497-f6e7-476e-baa5-cd8ae2c23f5f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 760,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "59c08fcc-514f-4d48-8dbe-b2577fda936b",
      "title": "",
      "fullFile": "cypress/integration/carrinhos.spec.js",
      "file": "cypress/integration/carrinhos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d7350f5a-2c79-477f-87d3-7e25d70eee26",
          "title": "Casos de teste do endpoint /carrinhos da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "36f0c41b-d95d-4069-be57-604451d9df6a",
              "title": "Testes para rota /carrinhos, cadastrar e deletar carrinhos",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "14944bc2-5695-4d40-882b-02d2528e0565",
                  "title": "Carrinho concluir-compra",
                  "fullFile": "",
                  "file": "",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve criar um produto",
                      "fullTitle": "Casos de teste do endpoint /carrinhos da API Serverest Testes para rota /carrinhos, cadastrar e deletar carrinhos Carrinho concluir-compra Deve criar um produto",
                      "timedOut": null,
                      "duration": 1034,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_produtos.default.adicionarProdutoComSucesso().then(res => {\n  cy.writeFile('./cypress/fixtures/produtoId.json', res);\n  cy.validacaoContrato(res, 'post-produtos', 201).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarAdicaoDeProdutoComSucesso(res);\n});",
                      "err": {},
                      "uuid": "14f4e15b-9c1d-4fe3-a975-81d0f7c85e41",
                      "parentUUID": "14944bc2-5695-4d40-882b-02d2528e0565",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Não deve criar um carrinho, pois não é permitido possuir produto duplicado",
                      "fullTitle": "Casos de teste do endpoint /carrinhos da API Serverest Testes para rota /carrinhos, cadastrar e deletar carrinhos Carrinho concluir-compra Não deve criar um carrinho, pois não é permitido possuir produto duplicado",
                      "timedOut": null,
                      "duration": 230,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_carrinhos.default.adicionarNaoPermitirProdutoDuplicadoNoCarrinho().then(res => {\n  cy.validacaoContrato(res, 'post-carrinhos', 400).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarNaoPermitirAdicaoDeProdutoDuplicado(res);\n});",
                      "err": {},
                      "uuid": "1aa65cd0-7e57-4dd0-888f-af5bda9e0f15",
                      "parentUUID": "14944bc2-5695-4d40-882b-02d2528e0565",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve criar um carrinho e adicionar os produtos especificados ligados à ele",
                      "fullTitle": "Casos de teste do endpoint /carrinhos da API Serverest Testes para rota /carrinhos, cadastrar e deletar carrinhos Carrinho concluir-compra Deve criar um carrinho e adicionar os produtos especificados ligados à ele",
                      "timedOut": null,
                      "duration": 223,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_carrinhos.default.adicionarCarrinhoComSucesso().then(res => {\n  cy.validacaoContrato(res, 'post-carrinhos', 201).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarAdicaoDeCarrinhos(res);\n});",
                      "err": {},
                      "uuid": "e67769b2-6262-4804-bf3f-13c4faf212d5",
                      "parentUUID": "14944bc2-5695-4d40-882b-02d2528e0565",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve deletar um carrinho-concluir",
                      "fullTitle": "Casos de teste do endpoint /carrinhos da API Serverest Testes para rota /carrinhos, cadastrar e deletar carrinhos Carrinho concluir-compra Deve deletar um carrinho-concluir",
                      "timedOut": null,
                      "duration": 222,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_carrinhos.default.deletarCarrinhoConcluirComSucesso().then(res => {\n  cy.validacaoContrato(res, 'delete-carrinhos-concluir', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarRemocaoDeCarrinhoConcluirComSucesso(res);\n});",
                      "err": {},
                      "uuid": "ff8b8f47-ad93-43b2-abcd-a336c7672ab6",
                      "parentUUID": "14944bc2-5695-4d40-882b-02d2528e0565",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "14f4e15b-9c1d-4fe3-a975-81d0f7c85e41",
                    "1aa65cd0-7e57-4dd0-888f-af5bda9e0f15",
                    "e67769b2-6262-4804-bf3f-13c4faf212d5",
                    "ff8b8f47-ad93-43b2-abcd-a336c7672ab6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1709,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "97fe9cb9-8738-462c-8fa8-9e4f63eb03c0",
                  "title": "Carrinho cancelar-compra",
                  "fullFile": "",
                  "file": "",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Deve criar um carrinho e adicionar os produtos especificados ligados à ele",
                      "fullTitle": "Casos de teste do endpoint /carrinhos da API Serverest Testes para rota /carrinhos, cadastrar e deletar carrinhos Carrinho cancelar-compra Deve criar um carrinho e adicionar os produtos especificados ligados à ele",
                      "timedOut": null,
                      "duration": 223,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_carrinhos.default.adicionarCarrinhoComSucesso().then(res => {\n  cy.validacaoContrato(res, 'post-carrinhos', 201).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarAdicaoDeCarrinhos(res);\n});",
                      "err": {},
                      "uuid": "94611f09-9364-4755-ae89-893a3245bdc5",
                      "parentUUID": "97fe9cb9-8738-462c-8fa8-9e4f63eb03c0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve deletar um carrinho-cancelar, deletar usuario e produto",
                      "fullTitle": "Casos de teste do endpoint /carrinhos da API Serverest Testes para rota /carrinhos, cadastrar e deletar carrinhos Carrinho cancelar-compra Deve deletar um carrinho-cancelar, deletar usuario e produto",
                      "timedOut": null,
                      "duration": 572,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "_carrinhos.default.deletarCarrinhoCancelarComSucesso().then(res => {\n  cy.validacaoContrato(res, 'delete-carrinhos-cancelar', 200).then(res => expect(res).to.be.eq('Contrato válido'));\n  _validaServerest.default.validarRemocaoDeCarrinhoCancelarComSucesso(res);\n  _produtos.default.deletarProduto().then(res => {\n    _validaServerest.default.validarRemocaoDeProdutoComSucesso(res);\n  });\n  _usuarios.default.deletarUsuarioComSucesso().then(res => {\n    _validaServerest.default.validaRemocaoDeUsuarioComSucesso(res);\n  });\n});",
                      "err": {
                        "message": "AssertionError: expected 'Registro excluído com sucesso. Estoque dos produtos reabastecido' to equal 'Registro excluído com sucesso'",
                        "estack": "AssertionError: expected 'Registro excluído com sucesso. Estoque dos produtos reabastecido' to equal 'Registro excluído com sucesso'\n    at Function.validarRemocaoDeCarrinhoCancelarComSucesso (https://serverest.dev/__cypress/tests?p=cypress\\integration\\carrinhos.spec.js:1114:36)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\carrinhos.spec.js:259:36)",
                        "diff": "- 'Registro excluído com sucesso. Estoque dos produtos reabastecido'\n+ 'Registro excluído com sucesso'\n"
                      },
                      "uuid": "3ce4fa77-b2f2-4d52-b876-ca43ef58c385",
                      "parentUUID": "97fe9cb9-8738-462c-8fa8-9e4f63eb03c0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Deve deletar usuario e produto",
                      "fullTitle": "Casos de teste do endpoint /carrinhos da API Serverest Testes para rota /carrinhos, cadastrar e deletar carrinhos Carrinho cancelar-compra Deve deletar usuario e produto",
                      "timedOut": null,
                      "duration": 427,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_produtos.default.deletarProduto().then(res => {\n  _validaServerest.default.validarRemocaoDeProdutoComSucesso(res);\n});\n_usuarios.default.deletarUsuarioComSucesso().then(res => {\n  _validaServerest.default.validaRemocaoDeUsuarioComSucesso(res);\n});",
                      "err": {},
                      "uuid": "cb420b32-2d6c-47e8-ac43-c2fbfca7adbe",
                      "parentUUID": "97fe9cb9-8738-462c-8fa8-9e4f63eb03c0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "94611f09-9364-4755-ae89-893a3245bdc5",
                    "cb420b32-2d6c-47e8-ac43-c2fbfca7adbe"
                  ],
                  "failures": [
                    "3ce4fa77-b2f2-4d52-b876-ca43ef58c385"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 1222,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "a5486e99-cc2f-4f27-bc40-d11a88e03a3b",
                  "title": "Usuário sem Token",
                  "fullFile": "",
                  "file": "",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Não deve criar um carrinho, pois o token é inválido, inexistente ou expirado",
                      "fullTitle": "Casos de teste do endpoint /carrinhos da API Serverest Testes para rota /carrinhos, cadastrar e deletar carrinhos Usuário sem Token Não deve criar um carrinho, pois o token é inválido, inexistente ou expirado",
                      "timedOut": null,
                      "duration": 440,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_login.default.loginSemSucesso().then(usuario => {\n  _carrinhos.default.adicionarCarrinhoSemToken().then(res => {\n    cy.validacaoContrato(res, 'post-carrinhos', 400).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarAdicaoDeCarrinhoSemToken(res);\n  });\n});",
                      "err": {},
                      "uuid": "fab7addc-74d5-44b4-b625-a7bd98abb7ec",
                      "parentUUID": "a5486e99-cc2f-4f27-bc40-d11a88e03a3b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Não deve deletar um carrinho-concluir, pois o token é inválido, inexistente ou expirado",
                      "fullTitle": "Casos de teste do endpoint /carrinhos da API Serverest Testes para rota /carrinhos, cadastrar e deletar carrinhos Usuário sem Token Não deve deletar um carrinho-concluir, pois o token é inválido, inexistente ou expirado",
                      "timedOut": null,
                      "duration": 435,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_login.default.loginSemSucesso().then(usuario => {\n  _carrinhos.default.deletarCarrinhoConcluirSemToken().then(res => {\n    cy.validacaoContrato(res, 'delete-carrinhos-concluir', 401).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarRemocaoDeCarrinhoConcluirSemToken(res);\n  });\n});",
                      "err": {},
                      "uuid": "071c8597-5aae-498c-a325-a05def7990b6",
                      "parentUUID": "a5486e99-cc2f-4f27-bc40-d11a88e03a3b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Não deve deletar um carrinho-cancelar, pois o token é inválido, inexistente ou expirado",
                      "fullTitle": "Casos de teste do endpoint /carrinhos da API Serverest Testes para rota /carrinhos, cadastrar e deletar carrinhos Usuário sem Token Não deve deletar um carrinho-cancelar, pois o token é inválido, inexistente ou expirado",
                      "timedOut": null,
                      "duration": 437,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "_login.default.loginSemSucesso().then(usuario => {\n  _carrinhos.default.deletarCarrinhoCancelarSemToken().then(res => {\n    cy.validacaoContrato(res, 'delete-carrinhos-cancelar', 401).then(res => expect(res).to.be.eq('Contrato válido'));\n    _validaServerest.default.validarRemocaoDeCarrinhoCancelarSemToken(res);\n  });\n});",
                      "err": {},
                      "uuid": "c0139288-63e5-4937-bec1-6ba7d15c33e0",
                      "parentUUID": "a5486e99-cc2f-4f27-bc40-d11a88e03a3b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fab7addc-74d5-44b4-b625-a7bd98abb7ec",
                    "071c8597-5aae-498c-a325-a05def7990b6",
                    "c0139288-63e5-4937-bec1-6ba7d15c33e0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1312,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}